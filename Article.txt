What is Git? GitHub?
	Git: It is a distributes version control solftware that we use to track our code
	GitHub: It is one of the famous Remote Repository provider owned by Microsoft

How to Install Git?


Cmds in Bash? (Git cmds vs Git Graphhical clients)
	> We can access a raw power 
	> Early access
	> Platform independent


 Directory navigation, file creation, ...

	git --version  --------------------> to see the version of Git installed in PC
	pwd (Present working directory) ---> Shows the current location and its path
	cd (Change directory) -------------> used to Move between directory ('tab' -> to auto complete)
	cd .. -----------------------------> used to move to parent folder
	cd / ------------------------------> (Root directory)
	ls (list) -------------------------> Shows the lsit of folder in the present directory 
	mkdir folder_name -----------------> used to Create folder  
	rmdir folder_name -----------------> used to Delete Empty Folder (we can't delete folders containing files in it) 
	rm -r folder_name -----------------> used to Delete Folder
	touch file_name.extension ---------> to create a File (Article.txt)

There are 3 areas of Git they are
	-> Working Directory
	-> Staging Area
	-> Repository

		Repository:
			> Local
			> Remote 


Git Basic Cmds
==============

1)How to config?

	git --global user.name "Sriramprasath"
	git --global user.email "Sriramprasath.2002@srit.org"
------------------------------------------------------------

2)How to create a Project Folder & File using Cmd in Bash?

	mkdir folder_name ---> Create Folder 
	touch file_name.extension ---> to create a File (Article.txt)
--------------------------------------------------------------

3)How to make our Project Folder into a git Repo?

	git init ---> Used to initaillze a Empty Git Repository
--------------------------------------------------------------

4)Status of the Repo?

	git status ---> to know the current Status of the repository
--------------------------------------------------------------

5)How to view the History/log of the Commits done?

	git log ---> shows the Log History of Commits done before 
--------------------------------------------------------------

6)Adding our changes to Staging area

	git add file_name.extension ---> add our changes of the file to Staging area 
	git add .  --> to add all files to Staging area
---------------------------------------------------------------------

7)Commiting the information to Master

	git commit -m 'message' ---> Saving the changes we have made to the Master in our local repository
---------------------------------------------------------------

8)Commiting the information to Master without Staging it

	git commit -a -m 'message'  ---> Saving the changes we have made to the Master in our local repository directly without Staging it
---------------------------------------------------------------


Three Ways to Git

	-> addding git to New Project
	-> addding git to existing project
	-> cloning a project


	Addding git to New Project :
		Step 1: Open the folder with cmd 
		Step 2: Cmd "git init" (To make the current Folder as working directory )
	
	Addding git to existing project :
		Step 1: Open the folder with cmd
		Step 2: Cmd "git init" (To make the current Folder as working directory )
		Step 3: Cmd "git status" (It shows all the files in the existing project ,we have to add all the files to it)	
		Step 4: Cmd "git add ." (To add all the folders to git)
		Step 5: Cmd "git commit -m "Type the msg" (To commit)

	Cloning someone else project :
		There are 2 types of cloning can be done with ssh and with https
			if we use 
				https -> need to login each time while pushing it to remote repo (Only accept our request if we have access to it from the owner of the repo)
				ssh ---> no need of repeted login for pushing it to remote repo 

	with https:
		Step 1: Go to GitHub
		Step 2: Search for the required Github repo 
		Step 3: Click "Code"(to downgload)
		Step 4: Then cpy the address(https mosly)
		Step 5: Move to the destination folder where you want to clone it
		Step 6: Right click,then open "Git Bash here " / open the folder with cmd
		Step 7: Cmd "git clone 'paste_the_URL",then press ENTER

	with ssh:
		for ssh we need to generate key 1st and add it to our github

		Step 1 : sshkey generation:
					Cmd	sh-keygen -o (then press Enter untill process finish)
		Step 2 : then cpy the ssh key which is present in the .pub file that is generated (it is shown in the cmd after generation)
		Step 3 : go to your github -> settings -> SSH and GPG keys
		Step 4 : click on New SSH key -> give a title and paste the generated key and save it
		Step 5 : Go to GitHub   
		Step 6 : Search for the required Github repo 
		Step 7 : Click "Code"(to downgload)
		Step 8 : Then cpy the address(ssh)
		Step 9 : Move to the destination folder where you want to clone it
		Step 10: Right click,then open "Git Bash here " / open the folder with cmd
		Step 11: Cmd "git clone 'paste_the_URL",then press ENTER

---------------------------------------------------------------
GitHub -> Push (To save the local files to remote) -> Pull (To save the remote files to local)
---------------------------------------------------------------

. The things that we all done before using git is tracked and stored in the local repository only.
. There are lots of service-providers avaliable for creating Remote Repository of git.
. Where Github is one of the most popular service-provider of git.

> Create a GitHub account
> In header bar,at the right corner you can find a '+' icon click it -> New repository -> Give repository name -> Create repository

There you can find some instructions on creating a new repo on cmd, push an existing repo from cmd,import code from another repo

GitHub Push and Pull operations between local and remote

	-> Open 'Git bash'
	-> git remote add url_name URL (Note: url_name can be any i.e,user defined or default/most-popular 'origin') (The URL is stored in the url_name)
	-> git branch -M main (This is line is to rename the existing branch named master into main) (.'. optional)
	-> git push -u origin main (-u = upstream stting) (This line says, to push the main branch into the URL which is stored in url_name i.e, origin )

	-> git pull origin (To save the remote objects to local)


========================================================================================================
we can execute multiple cmds in a single line with the help of '|'
	example:
		$ touch f3 | git add . | git commit -m 'multiple_cmds_in_a_line'
========================================================================================================
we don't need to memorize each and every cmds git helps us
	> git help
	> git help cmd (where cmd referes to the cmd which you have doubt about [eg. git help remote])
========================================================================================================
Reference :
	> Book --> https://git-scm.com/book/en/v2
	> Pratice Website --> https://learngitbranching.js.org
	> Blog to know more about commit tree --> https://medium.com/girl-writes-code/git-is-a-directed-acyclic-graph-and-what-the-heck-does-that-mean-b6c8dec65059



Git Branching:
	When we initialise a new repo/Addding git to existing project using "git init" cmd we can see a " (master) " which
has been added ,which is nothing but the default Branch provided by git hosting servecies.

1) How to create a new branch for our repo?

git branch branch_name ---> the branch name can be any(relevant & user specified) 
---------------------------------------------------------------------------------------------------------

2) How to check what are the avalible in our repo?

git branch ---> it lists the branches avaliable in the repo

note : Here you can see the main/master branch has different color with a * symbol 
       which denotes it was the present directory in which we are commiting.
---------------------------------------------------------------------------------------------------------

3) How to switch to other branch from present branch?

> git checkout branch_name ---> to switch branch
> we can do 1 & 3 in a single cmd => git checkout -b branch_name 

NOTE: HEAD points the tip of the tree
--------------------------------------------------------------------------------------------------------